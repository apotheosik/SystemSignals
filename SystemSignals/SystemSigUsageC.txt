//
// Created by Chris Sequeira on 10/3/19.
//
#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include<signal.h>

static void myHandler(int sig){
    printf("received SIGUSR1\n");
}
//parent will send SIGURS1 or SIGURS2 to child
int main(){
    pid_t pid;
    printf("start parent\n");
    pid = fork();
    if(pid<0){
        printf("fork failed.\n");
        exit(1);
    }
    else if(pid==0){
        //printf("Running child %d and my parent is %d\n", getpid(), getppid());
        signal(SIGUSR1, myHandler);
        signal(SIGUSR1, myHandler);
        for(int i=0; i<5; i++){
            sleep(2);
            printf("child\n");
        }
        printf("child finished");
        exit(0);
    }
    //no else because others exit
    //printf("in parent. %d. Child is %d.\n", getpid(), pid);
    for (int j = 0; j < 5; ++j) {
        sleep(1);
        printf("parent\n");
        kill(pid, SIGUSR1);
        sleep(1);
        kill(pid, SIGUSR1);

    }
    wait(&pid); //wait until child dies, blocking function
    printf("parent finished");
    return 0;
}
//static makes it local to the file
static void handler(int sig) {
    if (sig ==SIGINT){
        printf("SIGINT received");
    }
    else if (sig == SIGTSTP){
        printf("SIGSTP received");
    }
}
int a2() {
    int i;
    //calls handler when SIGINT is received
    signal(SIGINT, handler);
    signal(SIGTSTP, handler);
    for (int i = 0; i < 10; ++i) {
        sleep(1);
        printf("%d\n", i);
    }
}

